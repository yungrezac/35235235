import logging
from typing import Dict, List, Tuple, Optional
from enum import Enum, auto
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
INITIAL_CHIPS = 1000
MIN_PLAYERS = 2
MAX_PLAYERS = 6
ANTE_AMOUNT = 10
MIN_RAISE = 10
DEFAULT_TIMEOUT = 60  # seconds

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
class GameState(Enum):
    WAITING_FOR_PLAYERS = auto()
    COLLECTING_ANTE = auto()
    DEALING_CARDS = auto()
    BIDDING = auto()
    COMPARING_HANDS = auto()
    SWARA = auto()
    GAME_OVER = auto()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Card:
    RANKS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    SUITS = ['‚ô•', '‚ô¶', '‚ô£', '‚ô†']
    
    RANK_VALUES = {
        '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
        'J': 10, 'Q': 10, 'K': 10, 'A': 11
    }
    
    def __init__(self, rank: str, suit: str):
        if rank not in self.RANKS:
            raise ValueError(f"Invalid rank: {rank}")
        if suit not in self.SUITS:
            raise ValueError(f"Invalid suit: {suit}")
        
        self.rank = rank
        self.suit = suit
        self.value = self.RANK_VALUES[rank]
    
    def __str__(self):
        return f"{self.rank}{self.suit}"
    
    def __repr__(self):
        return str(self)
    
    def __eq__(self, other):
        return self.rank == other.rank and self.suit == other.suit

class Player:
    def __init__(self, user_id: int, name: str):
        self.user_id = user_id
        self.name = name
        self.chips = INITIAL_CHIPS
        self.cards: List[Card] = []
        self.is_dark = False
        self.folded = False
        self.current_bet = 0
        self.ready = False
        self.last_action_time = None
    
    def reset_round(self):
        self.cards.clear()
        self.is_dark = False
        self.folded = False
        self.current_bet = 0
        self.ready = False
        self.last_action_time = None
    
    @property
    def can_play(self) -> bool:
        return not self.folded and self.chips > 0
    
    def bet(self, amount: int) -> bool:
        if amount > self.chips:
            return False
        
        self.chips -= amount
        self.current_bet += amount
        return True
    
    def get_hand_value(self) -> Tuple[int, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—á–∫–∏, –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ (–æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π)
        if all(card.rank == '6' for card in self.cards):
            return (34, "–¢—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ (34 –æ—á–∫–∞)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤–∞ —Ç—É–∑–∞
        aces = [card for card in self.cards if card.rank == 'A']
        if len(aces) >= 2:
            return (22, "–î–≤–∞ —Ç—É–∑–∞ (22 –æ—á–∫–∞)")
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–∞–Ω–≥–∞–º
        rank_counts = {}
        for card in self.cards:
            rank_counts[card.rank] = rank_counts.get(card.rank, 0) + 1
        
        max_rank_score = 0
        best_rank_combination = ""
        for rank, count in rank_counts.items():
            if count >= 2:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –∏ —Ç—Ä–æ–π–∫–∏
                current_score = Card.RANK_VALUES[rank] * count
                if current_score > max_rank_score:
                    max_rank_score = current_score
                    best_rank_combination = f"{count}x{rank} ({current_score} –æ—á–∫–æ–≤)"
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –º–∞—Å—Ç—è–º
        suit_scores = {}
        for card in self.cards:
            suit_scores[card.suit] = suit_scores.get(card.suit, 0) + card.value
        
        max_suit_score = max(suit_scores.values()) if suit_scores else 0
        best_suit = next((suit for suit, score in suit_scores.items() if score == max_suit_score), None)
        best_suit_combination = f"–ú–∞—Å—Ç—å {best_suit} ({max_suit_score} –æ—á–∫–æ–≤)" if best_suit else ""
        
        if max_rank_score > max_suit_score:
            return (max_rank_score, best_rank_combination)
        elif max_suit_score > max_rank_score:
            return (max_suit_score, best_suit_combination)
        else:
            # –ï—Å–ª–∏ –æ—á–∫–∏ —Ä–∞–≤–Ω—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–¥–∞–µ—Ç—Å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ –º–∞—Å—Ç–∏
            return (max_suit_score, best_suit_combination or best_rank_combination)

class Game:
    def __init__(self):
        self.players: Dict[int, Player] = {}
        self.deck: List[Card] = []
        self.pot = 0
        self.current_bidder_index = 0
        self.current_max_bet = 0
        self.state = GameState.WAITING_FOR_PLAYERS
        self.bid_history = []
        self.swara_pot = 0
        self.last_raiser: Optional[Player] = None
        self.min_raise = MIN_RAISE
        self.chat_id = None
        self.creator_id = None
    
    @property
    def active_players(self) -> List[Player]:
        return [p for p in self.players.values() if p.can_play]
    
    @property
    def current_player(self) -> Optional[Player]:
        active = self.active_players
        if not active:
            return None
        return active[self.current_bidder_index % len(active)]
    
    def add_player(self, player: Player):
        if len(self.players) >= MAX_PLAYERS:
            raise ValueError("Maximum players reached")
        self.players[player.user_id] = player
    
    def remove_player(self, user_id: int):
        if user_id in self.players:
            del self.players[user_id]
    
    def initialize_deck(self):
        self.deck = [Card(rank, suit) for suit in Card.SUITS for rank in Card.RANKS]
        random.shuffle(self.deck)
    
    def deal_cards(self):
        # –†–∞–∑–¥–∞–µ–º –ø–æ 3 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        for _ in range(3):
            for player in self.players.values():
                if player.can_play and self.deck:
                    player.cards.append(self.deck.pop())
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏–≥—Ä—ã –≤—Ç–µ–º–Ω—É—é
        if self.players:
            dark_player = random.choice(list(self.players.values()))
            dark_player.is_dark = True
    
    def collect_ante(self):
        for player in self.players.values():
            if player.bet(ANTE_AMOUNT):
                self.pot += ANTE_AMOUNT
            else:
                player.folded = True
    
    def reset_bidding(self):
        self.current_max_bet = 0
        self.last_raiser = None
        for player in self.players.values():
            player.current_bet = 0
    
    def next_turn(self):
        active = self.active_players
        if not active:
            return False
        
        self.current_bidder_index += 1
        next_player = self.current_player
        
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ —É–∂–µ —É—Ä–∞–≤–Ω—è–ª —Å—Ç–∞–≤–∫—É –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–≤—ã—à–∞–≤—à–∏–π
        if next_player.current_bet >= self.current_max_bet or next_player == self.last_raiser:
            return False  # –ö–æ–Ω–µ—Ü –∫—Ä—É–≥–∞ —Ç–æ—Ä–≥–æ–≤
        
        return True
    
    def end_round(self):
        for player in self.players.values():
            player.reset_round()
        
        self.pot = 0
        self.swara_pot = 0
        self.reset_bidding()
        self.deck.clear()
        self.bid_history.clear()
        self.current_bidder_index = 0
        self.state = GameState.WAITING_FOR_PLAYERS

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
active_games: Dict[int, Game] = {}  # key: chat_id
user_data_cache = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def send_private_message(context: ContextTypes.DEFAULT_TYPE, player: Player, text: str):
    try:
        await context.bot.send_message(chat_id=player.user_id, text=text)
    except Exception as e:
        logger.error(f"Failed to send message to {player.user_id}: {e}")
        return False
    return True

async def notify_all_players(context: ContextTypes.DEFAULT_TYPE, game: Game, text: str):
    for player in game.players.values():
        await send_private_message(context, player, text)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    if chat_id in active_games:
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
        return
    
    game = Game()
    game.chat_id = chat_id
    game.creator_id = user.id
    active_games[chat_id] = game
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∏–≥—Ä—É
    player = Player(user.id, user.full_name)
    game.add_player(player)
    
    await update.message.reply_text(
        "üéÆ –ò–≥—Ä–∞ –°–µ–∫–∞ –Ω–∞—á–∞—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n"
        f"–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{MAX_PLAYERS}\n"
        "–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ready —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å."
    )

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    if chat_id not in active_games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    
    game = active_games[chat_id]
    
    if user.id in game.players:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return
    
    try:
        player = Player(user.id, user.full_name)
        game.add_player(player)
    except ValueError:
        await update.message.reply_text(f"–í –∏–≥—Ä–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ ({MAX_PLAYERS})!")
        return
    
    await update.message.reply_text(
        f"üëã {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
        f"–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{MAX_PLAYERS}\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ready —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å."
    )

async def ready(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    if chat_id not in active_games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    
    game = active_games[chat_id]
    
    if user.id not in game.players:
        await update.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ!")
        return
    
    player = game.players[user.id]
    if player.ready:
        await update.message.reply_text("–í—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã!")
        return
    
    player.ready = True
    
    ready_count = sum(1 for p in game.players.values() if p.ready)
    total_players = len(game.players)
    
    await update.message.reply_text(
        f"‚úÖ {player.name} –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ.\n"
        f"–ì–æ—Ç–æ–≤—ã: {ready_count}/{total_players}\n"
        "–û–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤..."
    )
    
    if ready_count == total_players and total_players >= MIN_PLAYERS:
        await begin_game(update, context)

async def begin_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    game = active_games[chat_id]
    
    if len(game.players) < MIN_PLAYERS:
        await update.message.reply_text(f"–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
        return
    
    if not all(player.ready for player in game.players.values()):
        await update.message.reply_text("–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã!")
        return
    
    game.state = GameState.COLLECTING_ANTE
    game.collect_ante()
    
    game.state = GameState.DEALING_CARDS
    game.initialize_deck()
    game.deal_cards()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for player in game.players.values():
        cards_str = ", ".join(str(card) for card in player.cards)
        score, desc = player.get_hand_value()
        
        message = f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {cards_str}\n"
        if player.is_dark:
            message += "üëÄ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤—Ç–µ–º–Ω—É—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç—ã.\n"
        else:
            message += f"üìä –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {desc}\n"
        
        if not await send_private_message(context, player, message):
            await update.effective_chat.send_message(
                f"{player.name}, —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º."
            )
            player.folded = True
    
    game.state = GameState.BIDDING
    game.current_max_bet = ANTE_AMOUNT
    
    await send_bidding_options(update, context)

async def send_bidding_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    game = active_games[chat_id]
    
    current_player = game.current_player
    if not current_player:
        await end_round(update, context)
        return
    
    keyboard = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.append([InlineKeyboardButton("üì§ –£–ø–∞—Å—Ç—å", callback_data="fold")])
    
    if current_player.current_bet < game.current_max_bet:
        call_amount = game.current_max_bet - current_player.current_bet
        keyboard.append([InlineKeyboardButton(f"üì• –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å ({call_amount})", callback_data="call")])
    else:
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check")])
    
    if current_player.chips >= game.min_raise:
        keyboard.append([InlineKeyboardButton(f"üìà –ü–æ–≤—ã—Å–∏—Ç—å (+{game.min_raise})", callback_data="raise")])
    
    if game.last_raiser is not None:
        keyboard.append([InlineKeyboardButton("üÉè –í—Å–∫—Ä—ã—Ç—å—Å—è", callback_data="showdown")])
    
    if current_player.is_dark:
        keyboard.append([InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—ã", callback_data="look")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üé≤ –•–æ–¥ {current_player.name}\n"
                 f"üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {game.current_max_bet}\n"
                 f"üí∞ –ë–∞–Ω–∫: {game.pot}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    user_id = query.from_user.id
    game = active_games.get(chat_id)
    
    if not game:
        await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    current_player = game.current_player
    if not current_player or user_id != current_player.user_id:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    action = query.data
    
    if action == "fold":
        current_player.folded = True
        await query.edit_message_text(f"üì§ {current_player.name} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã.")
    elif action == "call":
        bet_amount = game.current_max_bet - current_player.current_bet
        if current_player.bet(bet_amount):
            game.pot += bet_amount
            await query.edit_message_text(f"üì• {current_player.name} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É {game.current_max_bet}.")
        else:
            current_player.folded = True
            await query.edit_message_text(f"üí∏ {current_player.name} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤—ã–±—ã–≤–∞–µ—Ç.")
    elif action == "check":
        await query.edit_message_text(f"‚úÖ {current_player.name} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç.")
    elif action == "raise":
        user_data_cache[user_id] = {
            "chat_id": chat_id,
            "message_id": query.message.message_id,
            "action": "raise"
        }
        
        await send_private_message(
            context,
            current_player,
            f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {game.current_max_bet}\n"
            f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_player.current_bet}\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–≤—ã—à–µ–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {game.min_raise}):"
        )
        return
    elif action == "showdown":
        await query.edit_message_text(f"üÉè {current_player.name} —Ç—Ä–µ–±—É–µ—Ç –≤—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç!")
        await compare_hands(update, context)
        return
    elif action == "look":
        current_player.is_dark = False
        cards_str = ", ".join(str(card) for card in current_player.cards)
        score, desc = current_player.get_hand_value()
        await send_private_message(
            context,
            current_player,
            f"üëÄ –í—ã –±–æ–ª—å—à–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤—Ç–µ–º–Ω—É—é.\n"
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {cards_str}\n"
            f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {desc}"
        )
        await query.edit_message_text(f"üëÄ {current_player.name} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã.")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—Ä—É–≥–∞ —Ç–æ—Ä–≥–æ–≤
    if not game.next_turn():
        game.reset_bidding()
        game.current_bidder_index = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤
    if len(game.active_players) <= 1:
        await end_round(update, context)
        return
    
    await send_bidding_options(update, context)

async def handle_raise_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data_cache:
        return
    
    try:
        raise_amount = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = user_data_cache[user_id]
    chat_id = data["chat_id"]
    game = active_games.get(chat_id)
    
    if not game or user_id not in game.players:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.")
        return
    
    player = game.players[user_id]
    min_raise = game.min_raise
    call_amount = game.current_max_bet - player.current_bet
    total_needed = call_amount + min_raise
    
    if raise_amount < min_raise:
        await update.message.reply_text(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: {min_raise}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    total_bet = player.current_bet + call_amount + raise_amount
    
    if not player.bet(call_amount + raise_amount):
        await update.message.reply_text(
            f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫. –î–æ—Å—Ç—É–ø–Ω–æ: {player.chips + player.current_bet}"
        )
        return
    
    game.pot += call_amount + raise_amount
    game.current_max_bet = total_bet
    game.last_raiser = player
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üìà {player.name} –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–æ {total_bet}!"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—Ä—É–≥–∞ —Ç–æ—Ä–≥–æ–≤
    if not game.next_turn():
        game.reset_bidding()
        game.current_bidder_index = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤
    if len(game.active_players) <= 1:
        await end_round(update, context)
        return
    
    await send_bidding_options(update, context)

async def compare_hands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    game = active_games[chat_id]
    active_players = game.active_players
    
    if not active_players:
        await end_round(update, context)
        return
    
    if len(active_players) == 1:
        winner = active_players[0]
        await update.effective_chat.send_message(
            f"üèÜ {winner.name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –±–∞–Ω–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {game.pot}!"
        )
        winner.chips += game.pot
        await prepare_new_round(update, context)
        return
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    results = []
    for player in active_players:
        score, desc = player.get_hand_value()
        cards_str = ", ".join(str(card) for card in player.cards)
        results.append((player, score, desc, cards_str))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
    results.sort(key=lambda x: x[1], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for i, (player, score, desc, cards) in enumerate(results, 1):
        message += f"\n{i}. {player.name}: {cards} - {desc}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∏—á—å—é (—Å–≤–∞—Ä–∞)
    if len(results) > 1 and results[0][1] == results[1][1]:
        winners = [r[0] for r in results if r[1] == results[0][1]]
        winner_names = ", ".join(w.name for w in winners)
        
        await update.effective_chat.send_message(
            f"{message}\n\n‚öî –ù–∏—á—å—è –º–µ–∂–¥—É {winner_names}! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–≤–∞—Ä–∞."
        )
        
        game.state = GameState.SWARA
        game.swara_pot = game.pot
        game.pot = 0
        
        # –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–≤–∞—Ä—ã –¥–µ–ª–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        for player in winners[:]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if player.bet(ANTE_AMOUNT):
                game.pot += ANTE_AMOUNT
            else:
                winners.remove(player)
        
        if len(winners) >= 2:
            # –†–∞–∑–¥–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ
            for player in winners:
                if game.deck:
                    player.cards.append(game.deck.pop())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
            for player in winners:
                cards_str = ", ".join(str(card) for card in player.cards)
                score, desc = player.get_hand_value()
                await send_private_message(
                    context,
                    player,
                    f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ —Å–≤–∞—Ä—ã: {cards_str}\n"
                    f"üìä –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {desc}"
                )
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–∏ –¥–ª—è —Å–≤–∞—Ä—ã
            game.current_bidder_index = 0
            game.current_max_bet = 0
            game.last_raiser = None
            await update.effective_chat.send_message(
                "üé≤ –¢–æ—Ä–≥–∏ –≤ —Å–≤–∞—Ä–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è. –ü–µ—Ä–≤—ã–π —Ö–æ–¥ —É –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞."
            )
            await send_bidding_options(update, context)
        else:
            # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–ª—Å—è –≤ —Å–≤–∞—Ä–µ
            winner = winners[0]
            total_pot = game.swara_pot + game.pot
            winner.chips += total_pot
            await update.effective_chat.send_message(
                f"üèÜ {winner.name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Å–≤–∞—Ä—É –∏ –ø–æ–ª—É—á–∞–µ—Ç {total_pot}!"
            )
            await prepare_new_round(update, context)
    else:
        # –ï—Å—Ç—å —è–≤–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        winner = results[0][0]
        winner.chips += game.pot
        await update.effective_chat.send_message(
            f"{message}\n\nüèÜ {winner.name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –±–∞–Ω–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {game.pot}!"
        )
        await prepare_new_round(update, context)

async def prepare_new_round(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    game = active_games[chat_id]
    
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ —Ñ–∏—à–µ–∫
    for player_id in list(game.players.keys()):
        if game.players[player_id].chips <= 0:
            player_name = game.players[player_id].name
            game.remove_player(player_id)
            await update.effective_chat.send_message(
                f"üí∏ {player_name} –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∏—à–µ–∫."
            )
    
    if len(game.players) < MIN_PLAYERS:
        await update.effective_chat.send_message(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ ({len(game.players)}/{MIN_PLAYERS}). –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
        )
        del active_games[chat_id]
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Ä–∞—É–Ω–¥—É
    game.end_round()
    
    await update.effective_chat.send_message(
        "üîÑ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ready —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É.\n"
        f"–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{MAX_PLAYERS}"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in active_games:
        del active_games[chat_id]
    await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in active_games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return
    
    game = active_games[chat_id]
    balance_text = "\n".join(
        f"‚Ä¢ {player.name}: {player.chips} —Ñ–∏—à–µ–∫"
        for player in game.players.values()
    )
    
    await update.message.reply_text(
        "üí∞ –ë–∞–ª–∞–Ω—Å—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + balance_text
    )

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = (
        "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –°–µ–∫–∞:\n\n"
        "üé¥ –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 3 –∫–∞—Ä—Ç—ã\n"
        "üëÄ –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞–µ—Ç –≤—Ç–µ–º–Ω—É—é (–Ω–µ –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã)\n"
        "üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–∞–Ω—Ç–µ) - 10 —Ñ–∏—à–µ–∫\n\n"
        "üîÑ –•–æ–¥—ã –∏–≥—Ä–æ–∫–æ–≤:\n"
        "üì§ –£–ø–∞—Å—Ç—å - —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—ã –∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–∞—É–Ω–¥–∞\n"
        "üì• –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å - —É—Ä–∞–≤–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É\n"
        "üìà –ü–æ–≤—ã—Å–∏—Ç—å - —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É\n"
        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ (–µ—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ —É—Ä–∞–≤–Ω–µ–Ω–∞)\n"
        "üÉè –í—Å–∫—Ä—ã—Ç—å—Å—è - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ—Ä–≥–∏ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã\n\n"
        "üèÜ –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏:\n"
        "‚Ä¢ –¢—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏: 34 –æ—á–∫–∞\n"
        "‚Ä¢ –î–≤–∞ —Ç—É–∑–∞: 22 –æ—á–∫–∞\n"
        "‚Ä¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ –º–∞—Å—Ç–∏: —Å—É–º–º–∞ –æ—á–∫–æ–≤ –∫–∞—Ä—Ç –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏\n"
        "‚Ä¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ —Ä–∞–Ω–≥—É: —Å—É–º–º–∞ –æ—á–∫–æ–≤ –∫–∞—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞\n\n"
        "‚öî –ü—Ä–∏ –Ω–∏—á—å–µ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è —Å–≤–∞—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥)\n\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
    )
    await update.message.reply_text(rules_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üéÆ /start - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "üëã /join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        "‚úÖ /ready - –æ—Ç–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å\n"
        "üí∞ /balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã\n"
        "üìñ /rules - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n"
        "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É\n\n"
        "üé≤ –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π."
    )
    await update.message.reply_text(help_text)

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("6939360001:AAFI3w7MzpR-10314IstaCQwChx5ByFvMhk").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    command_handlers = {
        'start': start,
        'join': join,
        'ready': ready,
        'begin': begin_game,
        'balance': show_balance,
        'rules': rules,
        'help': help_command,
        'cancel': cancel
    }
    
    for command, handler in command_handlers.items():
        application.add_handler(CommandHandler(command, handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_raise_amount
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()

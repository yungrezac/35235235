import os
import logging
import random
from datetime import datetime, timedelta
from dotenv import load_dotenv
from supabase import create_client, Client
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    JobQueue
)

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
MIN_BET = 50
MAX_BET = 5000
REFERRAL_BONUS = 100

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GameManager:
    @staticmethod
    async def generate_cards():
        return [random.randint(1, 36) for _ in range(3)]

    @staticmethod
    async def determine_winner(cards):
        unique = len(set(cards))
        if unique == 1:
            return '—Ç—Ä–∏–ø–ª'
        elif unique == 2:
            return '–ø–∞—Ä–∞'
        else:
            return '—Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ref_code = context.args[0] if context.args else None
    
    user_data = supabase.table('users').select('*').eq('user_id', user.id).execute().data
    if not user_data:
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if ref_code:
            referrer = supabase.table('users').select('*').eq('user_id', ref_code).execute().data
            if referrer:
                supabase.table('referrals').insert({
                    'referrer_id': ref_code,
                    'referred_id': user.id
                }).execute()
                supabase.rpc('increment_referrals', {'user_id': ref_code}).execute()
                supabase.rpc('update_balance', {'user_id': user.id, 'amount': REFERRAL_BONUS}).execute()
        
        supabase.table('users').insert({
            'user_id': user.id,
            'username': user.username,
            'balance': REFERRAL_BONUS if ref_code else 0
        }).execute()
    
    keyboard = [
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
        [KeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = supabase.table('users').select('balance').eq('user_id', user.id).execute().data[0]
    await update.message.reply_text(f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {data['balance']}‚ÇΩ")

async def deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("ü•ù QIWI", callback_data="deposit_qiwi"),
         InlineKeyboardButton("üí≥ Card", callback_data="deposit_card")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)

async def handle_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    payment_data = ... # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    
    await query.edit_message_text(
        f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
        f"–°—É–º–º–∞: {payment_data['amount']}‚ÇΩ\n"
        f"–ö–æ—à–µ–ª–µ–∫: {payment_data['wallet']}\n\n"
        "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç"
    )

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bet = float(update.message.text.split()[-1])
        if not (MIN_BET <= bet <= MAX_BET):
            raise ValueError
        
        user = update.effective_user
        user_data = supabase.table('users').select('balance').eq('user_id', user.id).execute().data[0]
        
        if user_data['balance'] < bet:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
        game = supabase.table('games').insert({
            'chat_id': update.effective_chat.id,
            'creator_id': user.id,
            'bet_amount': bet,
            'status': 'waiting'
        }).execute().data[0]
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_{game['id']}")]]
        markup = InlineKeyboardMarkup(keyboard)
        
        msg = await update.message.reply_text(
            f"üéÆ –ò–≥—Ä–∞ #{game['id']}\n"
            f"üíµ –°—Ç–∞–≤–∫–∞: {bet}‚ÇΩ\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: 60 —Å–µ–∫",
            reply_markup=markup
        )
        
        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        context.job_queue.run_once(end_game, 60, data={
            'chat_id': update.effective_chat.id,
            'message_id': msg.message_id,
            'game_id': game['id']
        })
        
    except:
        await update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –î–∏–∞–ø–∞–∑–æ–Ω: {MIN_BET}-{MAX_BET}‚ÇΩ")

async def join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    game_id = int(query.data.split('_')[1])
    
    user = query.from_user
    game = supabase.table('games').select('*').eq('id', game_id).execute().data[0]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if supabase.table('game_players').select('*').eq('game_id', game_id).eq('user_id', user.id).execute().data:
        await query.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return
    
    if supabase.table('users').select('balance').eq('user_id', user.id).execute().data[0]['balance'] < game['bet_amount']:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    supabase.table('game_players').insert({
        'game_id': game_id,
        'user_id': user.id
    }).execute()
    
    await query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
    await query.edit_message_text(
        query.message.text + f"\nüë§ –£—á–∞—Å—Ç–Ω–∏–∫: {user.first_name}"
    )

async def end_game(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    game = supabase.table('games').select('*').eq('id', job.data['game_id']).execute().data[0]
    
    if game['status'] != 'waiting':
        return
    
    players = supabase.table('game_players').select('user_id').eq('game_id', job.data['game_id']).execute().data
    
    if len(players) < 2:
        await context.bot.edit_message_text(
            "‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            chat_id=job.data['chat_id'],
            message_id=job.data['message_id']
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    results = []
    for player in players:
        cards = await GameManager.generate_cards()
        result = await GameManager.determine_winner(cards)
        supabase.table('game_players').update({
            'cards': str(cards),
            'result': result
        }).eq('game_id', job.data['game_id']).eq('user_id', player['user_id']).execute()
        results.append((player['user_id'], result, max(cards)))
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner = sorted(results, key=lambda x: (x[1], x[2]), reverse=True)[0]
    total_pot = game['bet_amount'] * len(players)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
    supabase.rpc('update_balance', {'user_id': winner[0], 'amount': total_pot}).execute()
    supabase.table('games').update({'status': 'finished'}).eq('id', job.data['game_id']).execute()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_text = "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:\n\n"
    for user_id, res, card in results:
        user = await context.bot.get_chat(user_id)
        result_text += f"{user.first_name}: {res} ({card})\n"
    
    result_text += f"\nüéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {await context.bot.get_chat(winner[0]).first_name} +{total_pot}‚ÇΩ"
    
    await context.bot.edit_message_text(
        result_text,
        chat_id=job.data['chat_id'],
        message_id=job.data['message_id']
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = supabase.table('users').select('*').eq('user_id', user.id).execute().data[0]
    
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {data['games_played']}\n"
        f"üèÜ –ü–æ–±–µ–¥: {data['wins']}\n"
        f"üí∏ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {data['total_won']}‚ÇΩ\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {data['referrals_count']}"
    )
    
    await update.message.reply_text(stats_text)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r"^üí∞ –ë–∞–ª–∞–Ω—Å$"), balance))
    app.add_handler(MessageHandler(filters.Regex(r"^üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"), start_game))
    app.add_handler(MessageHandler(filters.Regex(r"^üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), deposit))
    app.add_handler(MessageHandler(filters.Regex(r"^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), stats))
    app.add_handler(CallbackQueryHandler(handle_deposit, pattern="^deposit_"))
    app.add_handler(CallbackQueryHandler(join_game, pattern="^join_"))
    
    app.run_polling()

if __name__ == "__main__":
    main()

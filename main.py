import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from supabase import create_client, Client
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InputTextMessageContent,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    InlineQueryHandler,
    ChatMemberHandler
)

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
STARTING_BALANCE = 1000  # –î–µ–º–æ –±–∞–ª–∞–Ω—Å
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ref_code = context.args[0] if context.args else None
    
    user_data = supabase.table('users').select('*').eq('user_id', user.id).execute().data
    if not user_data:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–º–æ –±–∞–ª–∞–Ω—Å–æ–º
        supabase.table('users').insert({
            'user_id': user.id,
            'username': user.username,
            'balance': STARTING_BALANCE
        }).execute()
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        if ref_code and ref_code != str(user.id):
            supabase.table('referrals').insert({
                'referrer_id': ref_code,
                'referred_id': user.id
            }).execute()
            supabase.rpc('increment_balance', {'user_id': ref_code, 'amount': 200}).execute()
            supabase.rpc('increment_balance', {'user_id': user.id, 'amount': 100}).execute()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="main_game")],
        [InlineKeyboardButton("üíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
         InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data="add_to_chat"),
         InlineKeyboardButton("üåê –ß–∞—Ç—ã —Å –±–æ—Ç–æ–º", callback_data="active_chats")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casino Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casino Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user = query.from_user
    
    if data == "main_game":
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã
        keyboard = [
            [InlineKeyboardButton("üé∞ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞", callback_data="quick_game")],
            [InlineKeyboardButton("üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä", callback_data="multiplayer")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "profile":
        user_data = supabase.table('users').select('*').eq('user_id', user.id).execute().data[0]
        ref_link = f"https://t.me/{context.bot.username}?start={user.id}"
        
        text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}‚ÇΩ\n"
            f"üìà –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.get('games_played', 0)}\n"
            f"üéâ –ü–æ–±–µ–¥: {user_data.get('wins', 0)}\n\n"
            f"üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: {ref_link}"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "deposit":
        keyboard = [
            [InlineKeyboardButton("ü•ù QIWI", callback_data="deposit_qiwi"),
             InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="deposit_card")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "add_to_chat":
        bot_username = context.bot.username
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            f"üë• –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç:\n\n"
            f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–π —á–∞—Ç\n"
            f"2. –î–æ–±–∞–≤—å—Ç–µ @{bot_username}\n"
            f"3. –í—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "active_chats":
        chats = supabase.table('chats').select('chat_id,title').execute().data
        if not chats:
            await query.answer("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
            return
        
        keyboard = []
        for chat in chats:
            keyboard.append([InlineKeyboardButton(
                f"üí¨ {chat['title']}", 
                callback_data=f"joinchat_{chat['chat_id']}"
            )])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await query.edit_message_text(
            "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –∏–≥—Ä—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data.startswith("joinchat_"):
        chat_id = data.split("_")[1]
        await query.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
    
    elif data == "main_menu":
        await start(update, context)

async def track_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–æ–≤"""
    if update.my_chat_member:
        chat = update.my_chat_member.chat
        new_status = update.my_chat_member.new_chat_member.status
        
        if new_status == 'administrator':
            supabase.table('chats').upsert({
                'chat_id': chat.id,
                'title': chat.title,
                'type': chat.type,
                'added_at': datetime.now().isoformat()
            }).execute()
        elif new_status in ['kicked', 'left']:
            supabase.table('chats').delete().eq('chat_id', chat.id).execute()

async def handle_game_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ —á–∞—Ç–∞—Ö"""
    if update.message.chat.type == 'private':
        return
    
    try:
        bet = float(context.args[0])
        user = update.effective_user
        
        user_data = supabase.table('users').select('balance').eq('user_id', user.id).execute().data
        if not user_data or user_data[0]['balance'] < bet:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
        game = supabase.table('games').insert({
            'chat_id': update.message.chat.id,
            'creator_id': user.id,
            'bet_amount': bet,
            'status': 'waiting'
        }).execute().data[0]
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_{game['id']}")]]
        await update.message.reply_text(
            f"üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞!\n–°—Ç–∞–≤–∫–∞: {bet}‚ÇΩ\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: 1",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /game <—Å—Ç–∞–≤–∫–∞>")

def main():
    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("game", handle_game_creation))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(ChatMemberHandler(track_chats))
    
    # –§–∏–ª—å—Ç—Ä—ã
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
    
    app.run_polling()

async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("game", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É (–≤ —á–∞—Ç–µ)"),
        BotCommand("profile", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
    ])

if __name__ == "__main__":
    main()

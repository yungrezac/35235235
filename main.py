import os
import logging
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from supabase import create_client, Client
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ChatMemberHandler
)
import requests
from enum import Enum

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTO_BOT_TOKEN = os.getenv("CRYPTO_BOT_TOKEN")
CRYPTO_BOT_NAME = os.getenv("CRYPTO_BOT_NAME")
STARTING_BALANCE = 1000
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
MIN_DEPOSIT = float(os.getenv("MIN_DEPOSIT", 100))
MIN_WITHDRAW = float(os.getenv("MIN_WITHDRAW", 100))
MIN_BET = 10
WEEKLY_BONUS = 300

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GameType(Enum):
    DICE = "dice"
    ROULETTE = "roulette"

class TransactionType(Enum):
    DEPOSIT = "deposit"
    WITHDRAW = "withdraw"
    BONUS = "bonus"
    WIN = "win"
    LOSS = "loss"

class CryptoBot:
    @staticmethod
    def create_invoice(amount: float, user_id: int):
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
            "Content-Type": "application/json"
        }
        data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            "payload": str(user_id)
        }
        response = requests.post(url, headers=headers, json=data)
        return response.json()

    @staticmethod
    def check_invoice(invoice_id: str):
        url = f"https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}"
        headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
        response = requests.get(url, headers=headers)
        return response.json()

class MiniGames:
    @staticmethod
    async def play_dice(user_id: int, bet: float):
        user_roll = random.randint(1, 6)
        bot_roll = random.randint(1, 6)
        
        if user_roll > bot_roll:
            win_amount = bet * 2
            result = f"üé≤ –í—ã: {user_roll} vs –ë–æ—Ç: {bot_roll}\n‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}‚ÇΩ!"
            status = "win"
        elif user_roll < bot_roll:
            win_amount = 0
            result = f"üé≤ –í—ã: {user_roll} vs –ë–æ—Ç: {bot_roll}\n‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet}‚ÇΩ!"
            status = "lose"
        else:
            win_amount = bet
            result = f"üé≤ –í—ã: {user_roll} vs –ë–æ—Ç: {bot_roll}\nü§ù –ù–∏—á—å—è! –í–æ–∑–≤—Ä–∞—Ç {bet}‚ÇΩ"
            status = "draw"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
        supabase.rpc('increment_balance', {'user_id': user_id, 'amount': win_amount}).execute()
        
        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        supabase.table('games_history').insert({
            'user_id': user_id,
            'game_type': GameType.DICE.value,
            'bet_amount': bet,
            'win_amount': win_amount,
            'result': status
        }).execute()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        supabase.rpc('update_user_stats', {
            'user_id': user_id,
            'games_played': 1,
            'wins': 1 if status == "win" else 0,
            'losses': 1 if status == "lose" else 0
        }).execute()
        
        return result

    @staticmethod
    async def play_roulette(user_id: int, bet: float, choice: str):
        number = random.randint(0, 36)
        is_red = number in [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if choice.isdigit():
            # –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
            if int(choice) == number:
                win_amount = bet * 36
                result = f"üéØ –í—ã–ø–∞–ª–æ: {number} ({'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á–µ—Ä–Ω–æ–µ'})\nüéâ –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! –í—ã–∏–≥—Ä—ã—à {win_amount}‚ÇΩ!"
                status = "win"
            else:
                win_amount = 0
                result = f"üéØ –í—ã–ø–∞–ª–æ: {number} ({'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á–µ—Ä–Ω–æ–µ'})\n‚ùå –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! –ü—Ä–æ–∏–≥—Ä—ã—à {bet}‚ÇΩ"
                status = "lose"
        elif choice in ["–∫—Ä–∞—Å–Ω–æ–µ", "—á–µ—Ä–Ω–æ–µ"]:
            # –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ü–≤–µ—Ç
            if (choice == "–∫—Ä–∞—Å–Ω–æ–µ" and is_red) or (choice == "—á–µ—Ä–Ω–æ–µ" and not is_red and number != 0):
                win_amount = bet * 2
                result = f"üéØ –í—ã–ø–∞–ª–æ: {number} ({'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á–µ—Ä–Ω–æ–µ'})\n‚úÖ –í—ã —É–≥–∞–¥–∞–ª–∏ —Ü–≤–µ—Ç! –í—ã–∏–≥—Ä—ã—à {win_amount}‚ÇΩ!"
                status = "win"
            else:
                win_amount = 0
                result = f"üéØ –í—ã–ø–∞–ª–æ: {number} ({'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á–µ—Ä–Ω–æ–µ'})\n‚ùå –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —Ü–≤–µ—Ç! –ü—Ä–æ–∏–≥—Ä—ã—à {bet}‚ÇΩ"
                status = "lose"
        elif choice in ["—á–µ—Ç–Ω–æ–µ", "–Ω–µ—á–µ—Ç–Ω–æ–µ"]:
            # –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç—å
            if number == 0:
                win_amount = 0
                result = f"üéØ –í—ã–ø–∞–ª–æ: {number} ({'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á–µ—Ä–Ω–æ–µ'})\n‚ùå –í—ã–ø–∞–ª 0! –ü—Ä–æ–∏–≥—Ä—ã—à {bet}‚ÇΩ"
                status = "lose"
            elif (choice == "—á–µ—Ç–Ω–æ–µ" and number % 2 == 0) or (choice == "–Ω–µ—á–µ—Ç–Ω–æ–µ" and number % 2 != 0):
                win_amount = bet * 2
                result = f"üéØ –í—ã–ø–∞–ª–æ: {number} ({'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á–µ—Ä–Ω–æ–µ'})\n‚úÖ –í—ã —É–≥–∞–¥–∞–ª–∏ —á–µ—Ç–Ω–æ—Å—Ç—å! –í—ã–∏–≥—Ä—ã—à {win_amount}‚ÇΩ!"
                status = "win"
            else:
                win_amount = 0
                result = f"üéØ –í—ã–ø–∞–ª–æ: {number} ({'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á–µ—Ä–Ω–æ–µ'})\n‚ùå –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —á–µ—Ç–Ω–æ—Å—Ç—å! –ü—Ä–æ–∏–≥—Ä—ã—à {bet}‚ÇΩ"
                status = "lose"
        else:
            win_amount = 0
            result = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏"
            status = "error"
        
        if status != "error":
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            if win_amount > 0:
                supabase.rpc('increment_balance', {'user_id': user_id, 'amount': win_amount}).execute()
            
            # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            supabase.table('games_history').insert({
                'user_id': user_id,
                'game_type': GameType.ROULETTE.value,
                'bet_amount': bet,
                'win_amount': win_amount,
                'result': status
            }).execute()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            supabase.rpc('update_user_stats', {
                'user_id': user_id,
                'games_played': 1,
                'wins': 1 if status == "win" else 0,
                'losses': 1 if status == "lose" else 0
            }).execute()
        
        return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ref_code = context.args[0] if context.args else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = supabase.table('users').select('*').eq('user_id', user.id).execute().data
    if not user_data:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        supabase.table('users').insert({
            'user_id': user.id,
            'username': user.username,
            'balance': STARTING_BALANCE,
            'created_at': datetime.now().isoformat(),
            'last_weekly_bonus': None
        }).execute()
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        if ref_code and ref_code != str(user.id):
            supabase.table('referrals').insert({
                'referrer_id': ref_code,
                'referred_id': user.id
            }).execute()
            supabase.rpc('increment_balance', {'user_id': ref_code, 'amount': 200}).execute()
            supabase.rpc('increment_balance', {'user_id': user.id, 'amount': 100}).execute()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games")],
        [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å", callback_data="bonuses"),
         InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="leaderboard")]
    ]
    
    await update.message.reply_text(
        "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casino Bot!\n\n"
        "üé∞ –ò–≥—Ä–∞–π—Ç–µ –≤ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user
    
    if data == "games":
        keyboard = [
            [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data="play_dice")],
            [InlineKeyboardButton("üéØ –†—É–ª–µ—Ç–∫–∞", callback_data="play_roulette")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data in ["play_dice"]:
        context.user_data['game_type'] = data
        await query.edit_message_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω. {MIN_BET}‚ÇΩ):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="games")]])
        )
    
    elif data == "play_roulette":
        keyboard = [
            [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data="roulette_–∫—Ä–∞—Å–Ω–æ–µ"),
             InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω–æ–µ", callback_data="roulette_—á–µ—Ä–Ω–æ–µ")],
            [InlineKeyboardButton("üî¢ –ß–µ—Ç–Ω–æ–µ", callback_data="roulette_—á–µ—Ç–Ω–æ–µ"),
             InlineKeyboardButton("üî£ –ù–µ—á–µ—Ç–Ω–æ–µ", callback_data="roulette_–Ω–µ—á–µ—Ç–Ω–æ–µ")],
            [InlineKeyboardButton("üéØ –ù–∞ —á–∏—Å–ª–æ", callback_data="roulette_number")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="games")]
        ]
        await query.edit_message_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data.startswith("roulette_"):
        choice_type = data.split("_")[1]
        if choice_type == "number":
            await query.edit_message_text(
                "üéØ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="play_roulette")]])
            )
            context.user_data['roulette_type'] = "number"
        else:
            context.user_data['game_type'] = "play_roulette"
            context.user_data['roulette_choice'] = choice_type
            await query.edit_message_text(
                f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω. {MIN_BET}‚ÇΩ):",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="play_roulette")]])
            )
    
    elif data == "deposit":
        await query.edit_message_text(
            f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_DEPOSIT}‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
    
    elif data == "withdraw":
        user_data = supabase.table('users').select('balance').eq('user_id', user.id).execute().data[0]
        if user_data['balance'] < MIN_WITHDRAW:
            await query.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW}‚ÇΩ", show_alert=True)
            return
        
        await query.edit_message_text(
            f"üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {user_data['balance']}‚ÇΩ\n–ú–∏–Ω–∏–º—É–º: {MIN_WITHDRAW}‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å USDT (TRC20) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<—Å—É–º–º–∞> <–∞–¥—Ä–µ—Å>\n\n"
            "–ü—Ä–∏–º–µ—Ä: 500 TA1b2c3d4e5f6g7h8j9k0",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
    
    elif data == "bonuses":
        user_data = supabase.table('users').select('*').eq('user_id', user.id).execute().data[0]
        last_weekly = user_data.get('last_weekly_bonus')
        
        weekly_available = True if last_weekly is None else (datetime.now() - datetime.fromisoformat(last_weekly)).days >= 7
        
        keyboard = []
        if weekly_available:
            keyboard.append([InlineKeyboardButton("üéÅ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å (+300‚ÇΩ)", callback_data="claim_weekly")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        text = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã:\n\n"
        if not weekly_available:
            next_weekly = (datetime.fromisoformat(last_weekly) + timedelta(days=7))
            text += f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑: {next_weekly - datetime.now()}\n"
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data.startswith("claim_"):
        bonus_type = data.split("_")[1]
        amount = WEEKLY_BONUS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
        user_data = supabase.table('users').select('*').eq('user_id', user.id).execute().data[0]
        last_bonus = user_data.get(f'last_{bonus_type}_bonus')
        
        if last_bonus is not None:
            delta = datetime.now() - datetime.fromisoformat(last_bonus)
            if (bonus_type == "weekly" and delta.days < 7):
                await query.answer("‚ùå –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω", show_alert=True)
                return
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        supabase.rpc('increment_balance', {'user_id': user.id, 'amount': amount}).execute()
        supabase.table('users').update({
            f'last_{bonus_type}_bonus': datetime.now().isoformat()
        }).eq('user_id', user.id).execute()
        
        # –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        supabase.table('transactions').insert({
            'user_id': user.id,
            'amount': amount,
            'type': TransactionType.BONUS.value,
            'status': 'completed',
            'description': f'{bonus_type} bonus'
        }).execute()
        
        await query.edit_message_text(
            f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount}‚ÇΩ –∑–∞ {bonus_type} –±–æ–Ω—É—Å!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bonuses")]])
        )
    
    elif data == "profile":
        user_data = supabase.table('users').select('*').eq('user_id', user.id).execute().data[0]
        ref_count = supabase.table('referrals').select('count').eq('referrer_id', user.id).execute().data[0]['count']
        ref_link = f"https://t.me/{context.bot.username}?start={user.id}"
        
        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user.username}\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}‚ÇΩ\n"
            f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.get('games_played', 0)}\n"
            f"üèÜ –ü–æ–±–µ–¥: {user_data.get('wins', 0)}\n"
            f"üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user_data.get('losses', 0)}\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}\n\n"
            f"üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: {ref_link}\n"
            f"üí∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 200‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", callback_data="game_history")],
            [InlineKeyboardButton("üí≥ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="transaction_history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "game_history":
        history = supabase.table('games_history').select('*').eq('user_id', user.id).order('created_at', desc=True).limit(10).execute().data
        
        if not history:
            text = "üìú –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞"
        else:
            text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä:\n\n"
            for game in history:
                result = "‚úÖ –í—ã–∏–≥—Ä—ã—à" if game['result'] == "win" else "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à" if game['result'] == "lose" else "ü§ù –ù–∏—á—å—è"
                text += (
                    f"{game['game_type'].capitalize()} | {result}\n"
                    f"–°—Ç–∞–≤–∫–∞: {game['bet_amount']}‚ÇΩ | –í—ã–∏–≥—Ä—ã—à: {game['win_amount']}‚ÇΩ\n"
                    f"–î–∞—Ç–∞: {datetime.fromisoformat(game['created_at']).strftime('%d.%m.%Y %H:%M')}\n\n"
                )
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")]])
        )
    
    elif data == "transaction_history":
        transactions = supabase.table('transactions').select('*').eq('user_id', user.id).order('created_at', desc=True).limit(10).execute().data
        
        if not transactions:
            text = "üí≥ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞"
        else:
            text = "üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
            for tx in transactions:
                if tx['type'] == TransactionType.DEPOSIT.value:
                    emoji = "‚¨ÜÔ∏è"
                    status = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
                elif tx['type'] == TransactionType.WITHDRAW.value:
                    emoji = "‚¨áÔ∏è"
                    status = "–í—ã–≤–æ–¥"
                elif tx['type'] == TransactionType.BONUS.value:
                    emoji = "üéÅ"
                    status = "–ë–æ–Ω—É—Å"
                else:
                    emoji = "üîÑ"
                    status = tx['type']
                
                text += (
                    f"{emoji} {status}: {tx['amount']}‚ÇΩ\n"
                    f"–°—Ç–∞—Ç—É—Å: {tx['status']}\n"
                    f"–î–∞—Ç–∞: {datetime.fromisoformat(tx['created_at']).strftime('%d.%m.%Y %H:%M')}\n\n"
                )
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")]])
        )
    
    elif data == "leaderboard":
        top_users = supabase.table('users').select('user_id, username, balance').order('balance', desc=True).limit(10).execute().data
        
        text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
        for i, user_data in enumerate(top_users, 1):
            text += f"{i}. @{user_data['username']} - {user_data['balance']}‚ÇΩ\n"
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
    
    elif data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games")],
            [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
             InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
            [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å", callback_data="bonuses"),
             InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="leaderboard")]
        ]
        await query.edit_message_text(
            "üèÜ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã
    if 'game_type' in context.user_data:
        try:
            bet = float(text)
            if bet < MIN_BET:
                await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - {MIN_BET}‚ÇΩ")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            user_data = supabase.table('users').select('balance').eq('user_id', user.id).execute().data[0]
            if user_data['balance'] < bet:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                return
            
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
            supabase.rpc('increment_balance', {'user_id': user.id, 'amount': -bet}).execute()
            
            # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
            game_type = context.user_data['game_type']
            if game_type == "play_dice":
                result = await MiniGames.play_dice(user.id, bet)
            elif game_type == "play_roulette":
                result = await MiniGames.play_roulette(user.id, bet, context.user_data['roulette_choice'])
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            user_data = supabase.table('users').select('balance').eq('user_id', user.id).execute().data[0]
            
            keyboard = [
                [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data=game_type)],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.message.reply_text(
                f"{result}\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}‚ÇΩ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.clear()
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–∞ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
    elif 'roulette_type' in context.user_data and context.user_data['roulette_type'] == "number":
        if text.isdigit() and 0 <= int(text) <= 36:
            context.user_data['game_type'] = "play_roulette"
            context.user_data['roulette_choice'] = text
            context.user_data.pop('roulette_type')
            await update.message.reply_text(
                f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω. {MIN_BET}‚ÇΩ):",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="play_roulette")]])
            )
        else:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36!")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    elif text.replace('.', '').isdigit() and float(text) >= MIN_DEPOSIT:
        amount = float(text)
        invoice = CryptoBot.create_invoice(amount, user.id)
        
        if invoice.get('result'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            supabase.table('transactions').insert({
                'user_id': user.id,
                'amount': amount,
                'type': TransactionType.DEPOSIT.value,
                'status': 'pending',
                'invoice_id': invoice['result']['invoice_id']
            }).execute()
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice['result']['pay_url'])],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice['result']['invoice_id']}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.message.reply_text(
                f"üí∏ –°—á–µ—Ç –Ω–∞ {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω\n\n"
                "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
    elif len(text.split()) == 2:
        try:
            amount, address = text.split()
            amount = float(amount)
            
            if amount < MIN_WITHDRAW:
                await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {MIN_WITHDRAW}‚ÇΩ")
                return
            
            user_data = supabase.table('users').select('balance').eq('user_id', user.id).execute().data[0]
            if user_data['balance'] < amount:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                return
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ Crypto Bot
            # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            supabase.rpc('increment_balance', {'user_id': user.id, 'amount': -amount}).execute()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            supabase.table('transactions').insert({
                'user_id': user.id,
                'amount': amount,
                'type': TransactionType.WITHDRAW.value,
                'status': 'completed',
                'address': address
            }).execute()
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å:\n{address}"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <—Å—É–º–º–∞> <–∞–¥—Ä–µ—Å>")
    
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    invoice_id = query.data.split('_')[1]
    invoice_data = CryptoBot.check_invoice(invoice_id)
    
    if invoice_data.get('result') and invoice_data['result'][0]['status'] == 'paid':
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        user_id = int(invoice_data['result'][0]['payload'])
        amount = float(invoice_data['result'][0]['amount'])
        
        supabase.rpc('increment_balance', {'user_id': user_id, 'amount': amount}).execute()
        supabase.table('transactions').update({'status': 'completed'}).eq('invoice_id', invoice_id).execute()
        
        await query.edit_message_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount}‚ÇΩ –∑–∞—á–∏—Å–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    else:
        await query.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    if update.callback_query:
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
    elif update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("games", "–°–ø–∏—Å–æ–∫ –∏–≥—Ä"),
        BotCommand("deposit", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand("withdraw", "–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"),
        BotCommand("profile", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
    ]
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CallbackQueryHandler(check_payment, pattern="^check_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    app.bot.set_my_commands(commands)
    
    app.run_polling()

if __name__ == "__main__":
    main()
